# -*- coding: utf-8 -*-
"""KT-BOM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gz98M9kvLCxo64fvGBnt3p43lrMq9_nG

# BOM Spreadsheet Calculation

To use this notebook, first upload a folder of .csv files, which you have exported from the Final CMR Drawing
"""

import pandas as pd
import numpy as np
import glob
import os

from tkinter.filedialog import askdirectory
path=askdirectory(title="Select a directory with .csv files exported from AutoCAD tables.")
# path = os.getcwd() # use your path
all_files = glob.glob(path + "/*.csv")

li = []

for filename in all_files:
    df = pd.read_csv(filename, index_col=None, header=0)
    df.columns = ["ACTIVITY #", "No #", "SIZE/TYPE", "LENGTH", "Z-COORDINATES"]
    ## TODO: don't add the table if contains XXX activities
    df = df.dropna(axis=0, subset="ACTIVITY #") # Drop the XXX entries
    df = df[df["ACTIVITY #"] != "XXX-X"]
    df["TABLE"] = filename
    li.append(df)

df = pd.concat(li, axis=0, ignore_index=True)

print("\nFILES LOADED:\n")
for file in all_files:
    print("\t",file)

structure_range = range(500, 599, 1)
line_range = range(600, 699, 1)
shadow_range = range(700, 799, 1)

errors = []

def massAdd(stringlist, error_list):
  length = 0
  for i in range(0,len(stringlist)):
    if "X" in stringlist[i].split("m")[0]:
      error_list.append(stringlist[i])
    else:
      length += int(stringlist[i].split("m")[0])
  return length, error_list

## Drop / remove any ill-formed columns prior to tallying, but report this to the user
nulls = df[df['SIZE/TYPE'].isnull()]
df = df[df['SIZE/TYPE'].notna()]
if len(nulls) > 0:
  print("Please fix the following tables:")
  print(nulls)
  for i in range(0, len(nulls)):
    errors.append(nulls.at[i, "TABLE"])

# List 18mm
#TODO: Common Error -- an SB is mistakenly described as an 18mm conduit. This should report to the user that the Table must be fixed.
## Knowns: The Number should not be of the form 5XX-X

line_18s = df[df['SIZE/TYPE'].str.contains('18mm')]
line_18s.dropna(axis=0, subset="ACTIVITY #")
line_18 = line_18s.LENGTH.values
line_18_multiples = line_18s["No #"].tolist()

# for line_length in line_18:
#   if type(line_length) :
#     print(line_length)

# lines_18_length, errors = massAdd(line_18, errors)

lines_18_length = 0
for i in range(0,len(line_18)):
  lines_18_length += int(str(line_18[i]).split("m")[0]) * int(line_18_multiples[i])

print("The total length of the 18mm conduit is", lines_18_length, "m.")

# List 50mm
line_50s = df[df['SIZE/TYPE'].str.contains('50mm')]
line_50s.dropna(axis=0, subset="ACTIVITY #")
line_50 = line_50s.LENGTH.values
line_50_multiples = line_50s["No #"].tolist()

# lines_50_length, errors = massAdd(line_50, errors)

lines_50_length = 0
for i in range(0,len(line_50)):
  lines_50_length += int(line_50[i].split("m")[0]) * line_50_multiples[i]

print("The total length of the 50mm conduit is", lines_50_length, "m.")

# For OKRG onward, activity numbers for drops use the convention 5XX-X, so we can use the '-' to count drops
# drops = df[df['ACTIVITY #'].str.contains("-", na=False)]
# print("The number of drops / flowerpots is", len(drops))


# For MLWD ONLY - DO NOT NEED if OKRG, ODGN, etc
#   we search for drops by the text "BORE 18mm", and count up the "No #" column
drops = df[df['SIZE/TYPE'].str.contains("BORE 18mm")]
drop_count = 0
for item in drops['No #']:
  # print(item)
  drop_count += int(item)
print("The number of drops / flowerpots is", drop_count)

# List all shadow duct
shadow = df[df['SIZE/TYPE'].str.contains("SHADOW")]
shadow = shadow["LENGTH"].values

lines_SHADOW_length, errors = massAdd(shadow, errors)

print("The total length of the SHADOW DUCT conduit is", lines_SHADOW_length, "m.")

# List Structures
structures = df[df['ACTIVITY #'].isin(structure_range)]

s_2335 = 0
s_1420 = 0
s_SV = 0
s_PED = 0
# TODO: Add other structure types

for structure in structures:
  s_2335  = len(df[df['SIZE/TYPE'].str.contains('2335')])
  s_1420  = len(df[df['SIZE/TYPE'].str.contains('1420')])
  s_SV    = len(df[df['SIZE/TYPE'].str.contains('VAULT')])
  s_PED   = len(df[df['SIZE/TYPE'].str.contains('SG-6')])

print("There are\n", s_2335, "2335 structures\n", s_1420, "MAH-1420 structures\n", s_SV, "Mini Service Vaults\n", s_PED, "SG-6 Type Pedestals\n")


with open(str(path+"\BOM.txt"), "w") as outfile:
  outfile.write(str(
    "FOLDER: \t"+path+
    "\n2335 structures:\t\t"+str(s_2335)+ 
    "\nMAH-1420 structures:\t\t"+str(s_1420)+ 
    "\nMini Service Vaults:\t\t"+ str(s_SV)+
    "\nSG-6 Type Pedestals:\t\t"+str(s_PED)+
    "\n50mm conduit length: \t\t"+str(lines_50_length)+ " m"+
    "\n18mm conduit length: \t\t"+ str(lines_18_length)+ " m"+
    "\nSHADOW DUCT conduit length:\t"+ str(lines_SHADOW_length)+ " m"+
    "\n# DROPS\t\t\t\t"+ str(drop_count)+
    "\n\n\n"+"Error List:"+str(errors)
    )
  )