# -*- coding: utf-8 -*-
"""tree-cable-allocation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pLsrrG9lWyXAvLy8Xz7Rop4p1YypGllY
"""

import pandas as pd
import numpy as np
import os
from ete3 import Tree

# path = "/content/Rhino_Tree_Export.csv"
from tkinter.filedialog import askdirectory, askopenfilename
file=askopenfilename()
# path=askdirectory()
# os.listdir(path)

# sheet = "Updated_Export"
# df = pd.read_excel(path, sheet_name=sheet)
df = pd.read_csv(file)
# df["Splice Number"] = df["Splice Number"].replace("FDH", 0)
# df["Parent Number"] = df["Parent Number"].replace("FDH", 0)
# df = df.set_index('Splice Number')
df.head()
# df

# sheet2 = "WIRE"
# dw = pd.read_excel(path, sheet_name=sheet2)
# dw.head()




t2 = Tree.from_parent_child_table(zip(df['Parent Path'], df["Path"]))
t2.describe()

"""Let's get the `postorder` traversal of the tree. Later we will use this to compute:
- FCP#
- Splice Activity Number
- Fibre range (aka count) for each splice and cable

We will use the `preorder` to compute the *cable* activity number
"""

# Logic to check if the splice is RSVD, reserved
# res = df.loc[:]["Reserve"]

# print("List of Fibres with Res")

# for r in res:
#   if isinstance(r, str):
#     print(r, "RES")

cable_ac_start = 303
if 'A' not in df:
  df["Cable Activity"] = np.nan
  df.at[df["Parent Path"]=="FDH","Cable Activity"] = cable_ac_start
  
max_cable_activity = df["Cable Activity"].max() # Previous this column was called "Activity Number"

if max_cable_activity==cable_ac_start:
  print("WARNING: Cable activities not yet allocated.")

else:
  print("The highest cable activity is", max_cable_activity)

ac = int(max_cable_activity) + 1 #starting number of Splice Activities (should be a continuation of the Cable activity numbers from WIRE sheet)
# splice_activities = [None] * len(df) # This fails because the indices used in the df dataframe don't match the true indices (and are therefore out of range)
# splice_activities = pd.DataFrame(index=df.index)

df["Cable Activity"] = np.nan

for node in t2.traverse("preorder"):

  print(node.name, df.at[node.name, "Number"], df.at[node.name, "Parent Number"])

  # We do not assign Splice Numbers the SV structures within the FDH, where "Parent Number" is 0 (the FDH)
  if df.at[node.name, "Parent Path"]=="FDH":
    df.at[node.name, "Cable Activity"] = np.nan

  else:
    # Add feature to tree
    node.add_features(activity=ac)

    # Add column to df
    df.at[node.name, "Cable Activity"] = int(ac)
    ac += 1

"""After running the below cell, I did the following:
*  copy and pasted this into a blank text file.
*  renamed the file to .csv
*  imported that into a sheet in excel
*  copied the column to the NODE(T) sheet of the "flattened" fibre layout
"""

df["Cable Activity"].tolist()
df.to_excel("/content/out.xlsx", index=False)

# After running this cell, I copy and pasted this into a blank text file
# Then, I renamed the file to .csv, and imported that into a sheet in excel
# Then, I copied the column to the NODE(T) sheet of the "flattened" fibre layout

"""Write out the Newick Tree of the FSA"""

t2.write(format=8) #features=["struc"],

"""## Pasting into AutoCAD

Below, change `n` to the value of the SB in question. If it is a PB, SV, or otherwise, change the text string below.
"""

n = 23 # change this to the number of the SB in question
struc = "SB-2061A3-"+str(n)
df[df['Struc']==struc]

this = df[df['Struc']=="SB-2061A3-"+inum]
this.iloc[0]["FCP"]

"""Example showing how to verify that the Fibre field is a string, and not a float, which it would be if it does not exist, since `NaN` is data type `float`"""

this = df.iloc[1]["Fibre"]
isinstance(this, str)

def string_constructor(struc):
  this = df[df['Struc']==struc]
  
  txt = "#"+str(this.iloc[0]["FCP"]).split("#")[1]
  txt += "\nFCP\n"
  txt += "F??? @"+struc+"\n"
  
  fsa = this.iloc[0]['Struc'].split("-")[1][:-1]
  txt += fsa +", "

  fibre = this.iloc[0]["Fibre"]
  spare = this.iloc[0]["Spare"]
  res = this.iloc[0]["Reserve"]

  # Append Fibre Range to String
  ## Start of Fibre Range
  if not isinstance(fibre, str):
    # print("Structure", struc, "has no HSDP fibre allocation.")
    txt += spare.split(",")[1].split("-")[0]
  else:
    txt += fibre.split(",")[1].split("-")[0]

  txt += "-"

  ## End of Fibre Range
  if not isinstance(spare, str):
    txt += fibre.split(",")[1].split("-")[1]
  else:
    txt += spare.split(",")[1].split("-")[1]

  ## TODO: Add RSVE counts case
  return txt


for struc in df.loc[:]["Struc"]:
  # n = 23
  # struc = "SB-2061A3-"+str(n)
  comment = string_constructor(struc)
  print(comment)
  with open(str(struc)+".txt", "w") as file:
      file.write(comment)
      file.close

# create a directory for the text files
try:
  !mkdir /text
except:
  print("directory /text/ must already exist")

# move all files into it
!mv *.txt text

!zip -r "text.zip" '/content/text'

from google.colab import files
files.download('text.zip')

"""# Add Tree Attributes (Features)"""

for node in t2.traverse("postorder"):
  # print("Node is ", node.name)
  key = "struc"
  if node.is_root():
    stype = "FDH"
    struc = "FDH"
    sss = False
    fcp = 0
    f = "1-864"
    s = 0
    r = 0
    s_act = False
  else:
    stype = df.loc[node.name, "Type"]
    struc = df.loc[node.name, "Struc"]
    sss = df.loc[node.name, "SSS"]
    fcp = df.loc[node.name, "FCP"]
    f = df.loc[node.name, "Fibre"]
    s = df.loc[node.name, "Spare"]
    r = df.loc[node.name, "Reserve"]
    # res =     # FLAG to indicate reserve (no Splice Activity)
    # range_start =
    # range_end = 
    s_act = df.loc[node.name, "Activity"]

  sheet = df.loc[node.name, "SHEET"]
  
  # print("struc: ", struc, )
  node.add_features(struc=struc, sss=sss, sheet=sheet, fcp=fcp, fibre=f, spare=s, reserve=r, splice=s_act)

# node.features
for node in t2.search_nodes(sss="SSS"):
  print(node.name, 
        node.struc, 
        node.sss, 
        node.fibre, 
        node.spare, 
        node.reserve, 
        node.sheet, 
        node.splice)

"""# FSA Verifications"""

nums = df["Number"]
seen = set()
uniq = [x for x in nums if x not in seen and not seen.add(x)]
dupes = [x for x in nums if x in seen or seen.add(x)]
print(dupes, uniq)



print(ete3.__version__)
from ete3 import Tree

t = Tree( "((a,b),c);" )
t.render(file_name="%%inline", w=500) #, units="mm"

ts = TreeStyle()
ts.show_leaf_name = True

def my_layout(node):
  #dont include root
  if not node.is_leaf() and node.up:
    node.add_face(TextFace(node.name), column=1, position='branch-right')
    node.add_face(AttrFace(node.))



import random
import sys

def get_json(node):
    # Read ETE tag for duplication or speciation events
    if not hasattr(node, 'evoltype'):
        dup = random.sample(['N','Y'], 1)[0]
    elif node.evoltype == "S":
        dup = "N"
    elif node.evoltype == "D":
        dup = "Y"

    # node.name = node.name.replace("'", '')
        
    json = { "name": node.name, 
             "display_label": node.name,
             "structure": node.struc,
             "branch_length": str(node.dist),
             "common_name": node.name,
            #  "seq_length": 0,
            #  "type": "node" if node.children else "leaf",
            #  "uniprot_name": "Unknown",
             }
    if node.children:
        json["children"] = []
        for ch in node.children:
            json["children"].append(get_json(ch))
    return json

print(str(get_json(t2)).replace("'", '"'))

